import type { AbstractModel, DetachedModelConstructor } from '@vaadin/hilla-lit-form';
import { type GridElement, type GridProps } from '@vaadin/react-components/Grid.js';
import { type ComponentType, type ForwardedRef, type JSX } from 'react';
import { type ColumnOptions } from './autogrid-columns.js';
import type { ListService } from './crud';
import { type ItemCounts } from './data-provider.js';
import { type HeaderFilterRendererProps } from './header-filter';
import type FilterUnion from './types/com/vaadin/hilla/crud/filter/FilterUnion.js';
export interface AutoGridRef<TItem = any> {
    /**
     * The underlying vaadin-grid DOM element.
     */
    grid: GridElement<TItem> | null;
    /**
     * Refreshes the grid by reloading the data from the backend.
     */
    refresh(): void;
}
interface AutoGridOwnProps<TItem> {
    /**
     * The service to use for fetching the data. This must be a TypeScript service
     * that has been generated by Hilla from a backend Java service that
     * implements the `com.vaadin.hilla.crud.ListService` interface.
     */
    service: ListService<TItem>;
    /**
     * The entity model to use for the grid, which determines which columns to
     * show and how to render them. This must be a Typescript model class that has
     * been generated by Hilla from a backend Java class. The model must match
     * with the type of the items returned by the service. For example, a
     * `PersonModel` can be used with a service that returns `Person` instances.
     *
     * By default, the grid shows columns for all properties of the model which
     * have a type that is supported. Use the `visibleColumns` option to customize
     * which columns to show and in which order.
     */
    model: DetachedModelConstructor<AbstractModel<TItem>>;
    /**
     * The property to use to detect an item's ID. The item ID is used to keep
     * the selection state when reloading the grid.
     *
     * By default, the component uses the property annotated with
     * `jakarta.persistence.Id`, or a property named `id`, in that order.
     * This option can be used to override the default behavior, or define the ID
     * property in case a class doesn't have a property matching the defaults.
     */
    itemIdProperty?: string;
    /**
     * Allows to provide a filter that is applied when fetching data from the
     * service. This can be used for implementing an external filter UI outside
     * the grid. A custom filter is not compatible with header filters.
     *
     * **NOTE:** This is considered an experimental feature and the API may change
     * in the future.
     */
    experimentalFilter?: FilterUnion;
    /**
     * Allows to customize which columns to show and in which order. This must be
     * an array of property names that are defined in the model. Nested properties
     * can be specified using dot notation, e.g. `address.street`.
     */
    visibleColumns?: string[];
    /**
     * Allows to customize which columns to hide. This must be an array of property
     * names that are defined in the model. Nested properties can be specified using
     * dot notation, e.g. `address.street`.
     */
    hiddenColumns?: string[];
    /**
     * Disables header filters, which are otherwise enabled by default.
     */
    noHeaderFilters?: boolean;
    /**
     * Allows to add custom columns to the grid. This must be an array of
     * `GridColumn` component instances. Custom columns are added after the
     * auto-generated columns.
     */
    customColumns?: JSX.Element[];
    /**
     * Allows to customize the props for individual columns. This is an object
     * where the keys must be property names that are defined in the model, and
     * the values are props that are accepted by the `GridColumn` component.
     * Nested properties can be specified using dot notation, e.g.
     * `address.street`.
     */
    columnOptions?: Record<string, ColumnOptions>;
    /**
     * When enabled, inserts a column with row numbers at the beginning of the
     * grid.
     */
    rowNumbers?: boolean;
    /**
     * When enabled, shows the total count of items in the grid footer.
     * This requires the provided service to implement the CountService interface,
     *  otherwise an error will be logged to the console, without any count being
     *  rendered.
     */
    totalCount?: boolean;
    /**
     * When enabled, shows the filtered item count in the grid footer.
     * if totalCount is also enabled, it will show both totalCount and filteredCount.
     * This requires the provided service to implement the CountService interface,
     *  otherwise an error will be logged to the console, without any count being
     *  rendered.
     */
    filteredCount?: boolean;
    /**
     * Allows to customize the grid footer with a custom renderer component for
     *  the total count and filtered item count.
     * This requires the provided service to implement the CountService interface,
     * See {@link AutoGrid#totalCount} and {@link AutoGrid#filteredCount}.
     */
    footerCountRenderer?: ComponentType<ItemCounts>;
}
export type AutoGridProps<TItem> = GridProps<TItem> & Readonly<AutoGridOwnProps<TItem>>;
declare function AutoGridInner<TItem>({ service, model, itemIdProperty, experimentalFilter, visibleColumns, hiddenColumns, noHeaderFilters, customColumns, columnOptions, rowNumbers, totalCount, filteredCount, footerCountRenderer, ...gridProps }: AutoGridProps<TItem>, ref: ForwardedRef<AutoGridRef<TItem>>): JSX.Element;
type AutoGrid = <TItem>(props: AutoGridProps<TItem> & {
    ref?: ForwardedRef<AutoGridRef<TItem>>;
}) => ReturnType<typeof AutoGridInner>;
/**
 * Auto Grid is a component for displaying tabular data based on a Java backend
 * service. It automatically generates columns based on the properties of a
 * Java class and provides features such as lazy-loading, sorting and filtering.
 *
 * Example usage:
 * ```tsx
 * import { AutoGrid } from '@vaadin/hilla-react-crud';
 * import PersonService from 'Frontend/generated/endpoints';
 * import PersonModel from 'Frontend/generated/com/example/application/Person';
 *
 * <AutoGrid service={PersonService} model={PersonModel} />
 * ```
 */
export declare const AutoGrid: AutoGrid;
export type { ColumnOptions, HeaderFilterRendererProps };
//# sourceMappingURL=autogrid.d.ts.map