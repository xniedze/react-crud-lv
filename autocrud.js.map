{
  "version": 3,
  "sources": ["src/autocrud.tsx"],
  "sourcesContent": ["import type { AbstractModel, DetachedModelConstructor, Value } from '@vaadin/hilla-lit-form';\nimport { Button } from '@vaadin/react-components/Button.js';\nimport { SplitLayout } from '@vaadin/react-components/SplitLayout.js';\nimport { type JSX, useId, useRef, useState } from 'react';\nimport { AutoCrudDialog } from './autocrud-dialog.js';\nimport css from './autocrud.obj.js';\nimport { type AutoFormProps, emptyItem, AutoForm } from './autoform.js';\nimport { type AutoGridProps, AutoGrid, type AutoGridRef } from './autogrid.js';\nimport type { CrudService } from './crud.js';\nimport { useMediaQuery } from './media-query.js';\nimport { type ComponentStyleProps, registerStylesheet } from './util.js';\n\nregisterStylesheet(css);\n\nexport type AutoCrudFormHeaderRenderer<TItem> = (\n  editedItem: TItem | null,\n  disabled: boolean,\n) => JSX.Element | null | undefined;\n\nexport type AutoCrudFormProps<TModel extends AbstractModel> = Omit<\n  Partial<AutoFormProps<TModel>>,\n  'disabled' | 'item' | 'model' | 'onDeleteSuccess' | 'onSubmitSuccess' | 'service'\n> &\n  Readonly<{\n    /**\n     * A custom renderer function to create the header for the form. The\n     * function receives the edited item as the first parameter, and a boolean\n     * indicating whether the form is disabled as the second parameter. The\n     * edited item is `null` when creating a new item.\n     *\n     * By default, the header shows \"New item\" when creating a new item, and\n     * \"Edit item\" when editing an existing item.\n     */\n    headerRenderer?: AutoCrudFormHeaderRenderer<Value<TModel>>;\n  }>;\n\nexport type AutoCrudGridProps<TItem> = Omit<\n  Partial<AutoGridProps<TItem>>,\n  'model' | 'onActiveItemChanged' | 'selectedItems' | 'service'\n>;\n\nexport type AutoCrudProps<TModel extends AbstractModel = AbstractModel> = ComponentStyleProps &\n  Readonly<{\n    /**\n     * The service to use for fetching the data, as well saving and deleting\n     * items. This must be a TypeScript service that has been generated by Hilla\n     * from a backend Java service that implements the\n     * `com.vaadin.hilla.crud.CrudService` interface.\n     */\n    service: CrudService<Value<TModel>>;\n    /**\n     * The entity model to use for the CRUD. This determines which columns to\n     * show in the grid, and which fields to show in the form. This must be a\n     * Typescript model class that has been generated by Hilla from a backend\n     * Java class. The model must match with the type of the items returned by\n     * the service. For example, a `PersonModel` can be used with a service that\n     * returns `Person` instances.\n     *\n     * By default, the grid shows columns for all properties of the model which\n     * have a type that is supported. Use the `gridProps.visibleColumns` option\n     * to customize which columns to show and in which order.\n     *\n     * By default, the form shows fields for all properties of the model which\n     * have a type that is supported. Use the `formProps.visibleFields`\n     * option to customize which fields to show and in which order.\n     */\n    model: DetachedModelConstructor<TModel>;\n    /**\n     * The property to use to detect an item's ID. The item ID is required for\n     * deleting items via the `CrudService.delete` method as well as keeping the\n     * selection state after reloading the grid.\n     *\n     * By default, the component uses the property annotated with\n     * `jakarta.persistence.Id`, or a property named `id`, in that order.\n     * This option can be used to override the default behavior, or define the ID\n     * property in case a class doesn't have a property matching the defaults.\n     */\n    itemIdProperty?: string;\n    /**\n     * Props to pass to the form. See the `AutoForm` component for details.\n     */\n    formProps?: AutoCrudFormProps<TModel>;\n    /**\n     * Props to pass to the grid. See the `AutoGrid` component for details.\n     */\n    gridProps?: AutoCrudGridProps<Value<TModel>>;\n  }>;\n\nfunction defaultFormHeaderRenderer<TItem>(editedItem: TItem | null, disabled: boolean): JSX.Element | null | undefined {\n  const style = { color: disabled ? 'var(--lumo-disabled-text-color)' : 'var(--lumo-text-color)' };\n  return editedItem ? <h3 style={style}>Edit item</h3> : <h3 style={style}>New item</h3>;\n}\n\n/**\n * Auto CRUD is a component that provides CRUD (create, read, update, delete)\n * functionality based on a Java backend service. It automatically generates a\n * grid that shows data from the service, and a form for creating, updating and\n * deleting items.\n *\n * Example usage:\n * ```tsx\n * import { AutoCrud } from '@hilla/react-crud';\n * import PersonService from 'Frontend/generated/endpoints';\n * import PersonModel from 'Frontend/generated/com/example/application/Person';\n *\n * <AutoCrud service={PersonService} model={PersonModel} />\n * ```\n */\nexport function AutoCrud<TModel extends AbstractModel>({\n  service,\n  model,\n  itemIdProperty,\n  formProps,\n  gridProps,\n  style,\n  id,\n  className,\n}: AutoCrudProps<TModel>): JSX.Element {\n  const [item, setItem] = useState<Value<TModel> | typeof emptyItem | undefined>(undefined);\n  const fullScreen = useMediaQuery('(max-width: 600px), (max-height: 600px)');\n  const autoGridRef = useRef<AutoGridRef>(null);\n  const { headerRenderer: customFormHeaderRenderer, ...autoFormProps } = formProps ?? {};\n  const formHeaderRenderer: AutoCrudFormHeaderRenderer<Value<TModel>> =\n    customFormHeaderRenderer ?? defaultFormHeaderRenderer;\n\n  const autoCrudId = useId();\n\n  function refreshGrid() {\n    autoGridRef.current?.refresh();\n  }\n\n  function handleCancel() {\n    setItem(undefined);\n  }\n\n  const formHeader = item && item !== emptyItem ? formHeaderRenderer(item, !item) : formHeaderRenderer(null, !item);\n\n  const mainSection = (\n    <div className=\"auto-crud-main\">\n      <AutoGrid\n        {...gridProps}\n        service={service}\n        model={model as DetachedModelConstructor<AbstractModel<Value<TModel>>>}\n        itemIdProperty={itemIdProperty}\n        selectedItems={item && item !== emptyItem ? [item] : []}\n        onActiveItemChanged={(e) => {\n          const activeItem = e.detail.value;\n          setItem(activeItem ?? undefined);\n        }}\n        ref={autoGridRef}\n        aria-controls={autoFormProps.id ?? `auto-form-${id ?? autoCrudId}`}\n      ></AutoGrid>\n      <div className=\"auto-crud-toolbar\">\n        <Button theme=\"primary\" onClick={() => setItem(emptyItem)}>\n          + Jauns\n        </Button>\n      </div>\n    </div>\n  );\n\n  const autoForm = (\n    <AutoForm\n      id={autoFormProps.id ?? `auto-form-${id ?? autoCrudId}`}\n      deleteButtonVisible={true}\n      {...autoFormProps}\n      disabled={!item}\n      service={service}\n      model={model}\n      itemIdProperty={itemIdProperty}\n      item={item}\n      onSubmitSuccess={({ item: submittedItem }) => {\n        if (fullScreen) {\n          setItem(undefined);\n        } else {\n          setItem(submittedItem);\n        }\n        refreshGrid();\n      }}\n      onDeleteSuccess={() => {\n        setItem(undefined);\n        refreshGrid();\n      }}\n    />\n  );\n\n  return (\n    <div className={`auto-crud ${className ?? ''}`} id={id} style={style}>\n      {fullScreen ? (\n        <>\n          {mainSection}\n          <AutoCrudDialog opened={!!item} header={formHeader} onClose={handleCancel}>\n            {autoForm}\n          </AutoCrudDialog>\n        </>\n      ) : (\n        <SplitLayout theme=\"small\">\n          {mainSection}\n          <div className=\"auto-crud-form\">\n            <div className=\"auto-crud-form-header\">{formHeader}</div>\n            {autoForm}\n          </div>\n        </SplitLayout>\n      )}\n    </div>\n  );\n}\n"],
  "mappings": "AA0FsB,SAkGd,UAlGc,KAgDlB,YAhDkB;AAzFtB,SAAS,cAAc;AACvB,SAAS,mBAAmB;AAC5B,SAAmB,OAAO,QAAQ,gBAAgB;AAClD,SAAS,sBAAsB;AAC/B,OAAO,SAAS;AAChB,SAA6B,WAAW,gBAAgB;AACxD,SAA6B,gBAAkC;AAE/D,SAAS,qBAAqB;AAC9B,SAAmC,0BAA0B;AAE7D,mBAAmB,GAAG;AA4EtB,SAAS,0BAAiC,YAA0B,UAAmD;AACrH,QAAM,QAAQ,EAAE,OAAO,WAAW,oCAAoC,yBAAyB;AAC/F,SAAO,aAAa,oBAAC,QAAG,OAAc,uBAAS,IAAQ,oBAAC,QAAG,OAAc,sBAAQ;AACnF;AAiBO,SAAS,SAAuC;AAAA,EACrD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAuC;AACrC,QAAM,CAAC,MAAM,OAAO,IAAI,SAAuD,MAAS;AACxF,QAAM,aAAa,cAAc,yCAAyC;AAC1E,QAAM,cAAc,OAAoB,IAAI;AAC5C,QAAM,EAAE,gBAAgB,0BAA0B,GAAG,cAAc,IAAI,aAAa,CAAC;AACrF,QAAM,qBACJ,4BAA4B;AAE9B,QAAM,aAAa,MAAM;AAEzB,WAAS,cAAc;AACrB,gBAAY,SAAS,QAAQ;AAAA,EAC/B;AAEA,WAAS,eAAe;AACtB,YAAQ,MAAS;AAAA,EACnB;AAEA,QAAM,aAAa,QAAQ,SAAS,YAAY,mBAAmB,MAAM,CAAC,IAAI,IAAI,mBAAmB,MAAM,CAAC,IAAI;AAEhH,QAAM,cACJ,qBAAC,SAAI,WAAU,kBACb;AAAA;AAAA,MAAC;AAAA;AAAA,QACE,GAAG;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA,eAAe,QAAQ,SAAS,YAAY,CAAC,IAAI,IAAI,CAAC;AAAA,QACtD,qBAAqB,CAAC,MAAM;AAC1B,gBAAM,aAAa,EAAE,OAAO;AAC5B,kBAAQ,cAAc,MAAS;AAAA,QACjC;AAAA,QACA,KAAK;AAAA,QACL,iBAAe,cAAc,MAAM,aAAa,MAAM,UAAU;AAAA;AAAA,IACjE;AAAA,IACD,oBAAC,SAAI,WAAU,qBACb,8BAAC,UAAO,OAAM,WAAU,SAAS,MAAM,QAAQ,SAAS,GAAG,qBAE3D,GACF;AAAA,KACF;AAGF,QAAM,WACJ;AAAA,IAAC;AAAA;AAAA,MACC,IAAI,cAAc,MAAM,aAAa,MAAM,UAAU;AAAA,MACrD,qBAAqB;AAAA,MACpB,GAAG;AAAA,MACJ,UAAU,CAAC;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,iBAAiB,CAAC,EAAE,MAAM,cAAc,MAAM;AAC5C,YAAI,YAAY;AACd,kBAAQ,MAAS;AAAA,QACnB,OAAO;AACL,kBAAQ,aAAa;AAAA,QACvB;AACA,oBAAY;AAAA,MACd;AAAA,MACA,iBAAiB,MAAM;AACrB,gBAAQ,MAAS;AACjB,oBAAY;AAAA,MACd;AAAA;AAAA,EACF;AAGF,SACE,oBAAC,SAAI,WAAW,aAAa,aAAa,EAAE,IAAI,IAAQ,OACrD,uBACC,iCACG;AAAA;AAAA,IACD,oBAAC,kBAAe,QAAQ,CAAC,CAAC,MAAM,QAAQ,YAAY,SAAS,cAC1D,oBACH;AAAA,KACF,IAEA,qBAAC,eAAY,OAAM,SAChB;AAAA;AAAA,IACD,qBAAC,SAAI,WAAU,kBACb;AAAA,0BAAC,SAAI,WAAU,yBAAyB,sBAAW;AAAA,MAClD;AAAA,OACH;AAAA,KACF,GAEJ;AAEJ;",
  "names": []
}
