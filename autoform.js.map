{
  "version": 3,
  "sources": ["src/autoform.tsx"],
  "sourcesContent": ["import { type AbstractModel, type DetachedModelConstructor, ValidationError, type Value } from '@hilla/form';\nimport { EndpointError } from '@hilla/frontend';\nimport { Button } from '@hilla/react-components/Button.js';\nimport { ConfirmDialog } from '@hilla/react-components/ConfirmDialog';\nimport { FormLayout } from '@hilla/react-components/FormLayout';\nimport { VerticalLayout } from '@hilla/react-components/VerticalLayout.js';\nimport { useForm, type UseFormResult } from '@hilla/react-form';\nimport {\n  type ComponentType,\n  type JSX,\n  type KeyboardEvent,\n  type ReactElement,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { AutoFormField, type AutoFormFieldProps, type FieldOptions } from './autoform-field.js';\nimport css from './autoform.obj.js';\nimport type { FormService } from './crud.js';\nimport { getDefaultProperties, ModelInfo, type PropertyInfo } from './model-info.js';\nimport { type ComponentStyleProps, registerStylesheet } from './util.js';\n\nregisterStylesheet(css);\n\nexport const emptyItem = Symbol();\n\n/**\n * An event that is fired when an error occurs while submitting the form.\n */\nexport type SubmitErrorEvent = {\n  /**\n   * The error that occurred.\n   */\n  error: EndpointError;\n  /**\n   * A function that can be used to set a custom error message. This will be\n   * shown in the form at the same position as the default error message.\n   * You are not required to call this function if you want to handle the\n   * error differently.\n   */\n  setMessage(message: string): void;\n};\n\n/**\n * An event that is fired when the form has been successfully submitted.\n */\nexport type SubmitEvent<TItem> = {\n  /**\n   * The item that was submitted, as returned by the service.\n   */\n  item: TItem;\n};\n\n/**\n * An event that is fired when an error occurs while deleting an item.\n */\nexport type DeleteErrorEvent = {\n  /**\n   * The error that occurred.\n   */\n  error: EndpointError;\n  /**\n   * A function that can be used to set a custom error message. This will be\n   * shown in the form at the same position as the default error message.\n   * You are not required to call this function if you want to handle the\n   * error differently.\n   */\n  setMessage(message: string): void;\n};\n\n/**\n * An event that is fired when the form has been successfully deleted.\n */\nexport type DeleteEvent<TItem> = {\n  /**\n   * The item that was deleted, as returned by the service.\n   */\n  item: TItem;\n};\n\nexport type AutoFormLayoutRendererProps<M extends AbstractModel> = Readonly<{\n  form: UseFormResult<M>;\n  children: ReadonlyArray<ReactElement<AutoFormFieldProps>>;\n}>;\n\nexport type AutoFormProps<M extends AbstractModel = AbstractModel> = ComponentStyleProps &\n  Readonly<{\n    /**\n     * The service to use for saving and deleting items. This must be a\n     * TypeScript service that has been generated by Hilla from a backend Java\n     * service that implements the `dev.hilla.crud.FormService` interface.\n     */\n    service: FormService<Value<M>>;\n    /**\n     * The entity model to use, which determines which fields to show in the\n     * form. This must be a Typescript model class that has been generated by\n     * Hilla from a backend Java class. The model must match with the type of\n     * the items handled by the service. For example, a `PersonModel` can be\n     * used with a service that handles `Person` instances.\n     *\n     * By default, the form shows fields for all properties of the model which\n     * have a type that is supported. Use the `visibleFields` option to customize\n     * which fields to show and in which order.\n     */\n    model: DetachedModelConstructor<M>;\n    /**\n     * The property to use to detect an item's ID. The item ID is required for\n     * deleting items via the `FormService.delete` method. The delete button\n     * will not be shown if no item ID can be found.\n     *\n     * By default, the component uses the property annotated with\n     * `jakarta.persistence.Id`, or a property named `id`, in that order.\n     * This option can be used to override the default behavior, or define the ID\n     * property in case a class doesn't have a property matching the defaults.\n     */\n    itemIdProperty?: string;\n    /**\n     * The item to edit in the form. The form fields are automatically populated\n     * with values from the item's properties. In order to create a new item,\n     * either pass `null`, or leave this prop as undefined.\n     *\n     * Use the `onSubmitSuccess` callback to get notified when the item has been\n     * saved.\n     *\n     * When submitting a new item (i.e. when `item` is null or undefined), the\n     * form will be automatically cleared, allowing to submit another new item.\n     * In order to keep editing the same item after submitting, set the `item`\n     * prop to the new item.\n     */\n    item?: Value<M> | typeof emptyItem | null;\n    /**\n     * Whether the form should be disabled. This disables all form fields and\n     * all buttons.\n     */\n    disabled?: boolean;\n    /**\n     * Whether the form should be readonly. This make all form fields readonly hides \n     * all buttons.\n     */\n    readonly?: boolean;\n    /**\n     * Allows to customize the layout of the form by providing a custom\n     * renderer. The renderer receives the form instance and the pre-rendered\n     * fields as props. The renderer can either reuse the pre-rendered fields in\n     * the custom layout, or render custom fields and connect them to the form\n     * manually.\n     *\n     * Check the component documentation for details and examples.\n     *\n     * Example using pre-rendered fields:\n     * ```tsx\n     * <AutoForm layoutRenderer={({ children }) =>\n     *   <VerticalLayout>\n     *     {children}\n     *     <p>All data is collected anonymously.</p>\n     *   </VerticalLayout>\n     * } />\n     * ```\n     *\n     * Example rendering custom fields:\n     * ```tsx\n     * <AutoForm layoutRenderer={({ form }) =>\n     *   <VerticalLayout>\n     *     <TextField {...form.field(form.model.name)} />\n     *     ...\n     *   </VerticalLayout>\n     * } />\n     * ```\n     */\n    layoutRenderer?: ComponentType<AutoFormLayoutRendererProps<M>>;\n    /**\n     * Defines the fields to show in the form, and in which order. This takes\n     * an array of property names. Properties that are not included in this\n     * array will not be shown in the form, and properties that are included,\n     * but don't exist in the model, will be ignored.\n     */\n    visibleFields?: string[];\n    /**\n     * Allows to customize the FormLayout used by default. This is especially useful\n     * to define the `responsiveSteps`. See the\n     * {@link https://hilla.dev/docs/react/components/form-layout | FormLayout documentation}\n     * for details.\n     */\n    formLayoutProps?: ComponentStyleProps & Pick<Parameters<typeof FormLayout>[0], 'responsiveSteps'>;\n    /**\n     * Allows to customize individual fields of the form. This takes an object\n     * where the keys are property names, and the values are options for the\n     * respective field for editing that property.\n     */\n    fieldOptions?: Record<string, FieldOptions>;\n    /**\n     * Whether to show the delete button in the form. This is disabled by\n     * default. If enabled, the delete button will only be shown when editing\n     * an existing item, which means that `item` is not null. The delete button\n     * will also only be shown if an item has a discernible ID. See the\n     * `itemIdProperty` prop for details how the item ID is detected.\n     *\n     * Use the `onDeleteSuccess` callback to get notified when the item has been\n     * deleted.\n     *\n     * NOTE: This only hides the button, it does not prevent from calling the\n     * delete method on the service. To completely disable deleting, you must\n     * override the `delete` method in the backend Java service to either throw\n     * an exception or annotate it with `@DenyAll` to prevent access.\n     */\n    deleteButtonVisible?: boolean;\n    /**\n     * A callback that will be called if an unexpected error occurs while\n     * submitting the form.\n     *\n     * Note that this will not be called for validation errors, which are\n     * handled automatically.\n     */\n    onSubmitError?({ error }: SubmitErrorEvent): void;\n    /**\n     * A callback that will be called after the form has been successfully\n     * submitted and the item has been saved.\n     *\n     * When submitting a new item (i.e. when `item` is null or undefined), the\n     * form will be automatically cleared, allowing to submit another new item.\n     * In order to keep editing the same item after submitting, set the `item`\n     * prop to the new item.\n     */\n    onSubmitSuccess?({ item }: SubmitEvent<Value<M>>): void;\n    /**\n     * A callback that will be called if an unexpected error occurs while\n     * deleting an item.\n     */\n    onDeleteError?({ error }: DeleteErrorEvent): void;\n    /**\n     * A callback that will be called after the form has been successfully\n     * deleted.\n     */\n    onDeleteSuccess?({ item }: DeleteEvent<Value<M>>): void;\n  }>;\n\n/**\n * Auto Form is a component that automatically generates a form for editing,\n * updating and deleting items from a backend service.\n *\n * Example usage:\n * ```tsx\n * import { AutoForm } from '@hilla/react-crud';\n * import PersonService from 'Frontend/generated/endpoints';\n * import PersonModel from 'Frontend/generated/com/example/application/Person';\n *\n * <AutoForm\n *   service={PersonService}\n *   model={PersonModel}\n *   onSubmitSuccess={({ item }) => {\n *     console.log('Submitted item:', item);\n *   }}\n * />\n * ```\n */\nexport function AutoForm<M extends AbstractModel>({\n  service,\n  model,\n  itemIdProperty,\n  item = emptyItem,\n  onSubmitError,\n  onSubmitSuccess,\n  disabled,\n  readonly,\n  layoutRenderer: LayoutRenderer,\n  visibleFields,\n  formLayoutProps,\n  fieldOptions,\n  style,\n  id,\n  className,\n  deleteButtonVisible,\n  onDeleteSuccess,\n  onDeleteError,\n}: AutoFormProps<M>): JSX.Element {\n  const form = useForm(model, {\n    onSubmit: async (formItem) => service.save(formItem),\n  });\n  const [formError, setFormError] = useState('');\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const modelInfo = useMemo(() => new ModelInfo(model, itemIdProperty), [model]);\n\n  const isEditMode = item !== undefined && item !== null && item !== emptyItem;\n  const showDeleteButton = deleteButtonVisible && isEditMode && modelInfo.idProperty;\n  const isSubmitDisabled = !!disabled || (isEditMode && !form.dirty);\n\n  useEffect(() => {\n    if (item !== emptyItem) {\n      form.read(item);\n    } else {\n      form.clear();\n    }\n  }, [item]);\n\n  async function handleSubmit(): Promise<void> {\n    try {\n      setFormError('');\n      const newItem = await form.submit();\n      if (newItem === undefined) {\n        // If update returns an empty object, then no update was performed\n        throw new EndpointError('No update performed');\n      } else if (onSubmitSuccess) {\n        onSubmitSuccess({ item: newItem });\n      }\n      // Automatically clear the form after submitting a new item.\n      // Otherwise, there would be no way for the developer to clear it, as the\n      // there is no new value to set for the item prop to trigger the above\n      // effect in case the prop is already null, undefined or the empty item.\n      if (!item || item === emptyItem) {\n        form.clear();\n      }\n    } catch (error) {\n      if (error instanceof ValidationError) {\n        // Handled automatically\n        return;\n      }\n      if (error instanceof EndpointError) {\n        if (onSubmitError) {\n          onSubmitError({ error, setMessage: setFormError });\n        } else {\n          setFormError(error.message);\n        }\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  function deleteItem() {\n    setShowDeleteDialog(true);\n  }\n\n  async function confirmDelete() {\n    // At this point, item can not be null or emptyItem\n    const deletedItem = item as Value<M>;\n    try {\n      const idProperty = modelInfo.idProperty!;\n      // eslint-disable-next-line\n      const id = (item as any)[idProperty.name];\n      await service.delete(id);\n      if (onDeleteSuccess) {\n        onDeleteSuccess({ item: deletedItem });\n      }\n    } catch (error) {\n      if (error instanceof EndpointError) {\n        if (onDeleteError) {\n          onDeleteError({ error, setMessage: setFormError });\n        } else {\n          setFormError(error.message);\n        }\n      } else {\n        throw error;\n      }\n    } finally {\n      setShowDeleteDialog(false);\n    }\n  }\n\n  function cancelDelete() {\n    setShowDeleteDialog(false);\n  }\n\n  const handleKeyDown = (event: KeyboardEvent): void => {\n    if (event.key === 'Enter' && !isSubmitDisabled) {\n      // eslint-disable-next-line no-void\n      void handleSubmit();\n    }\n  };\n\n  function createAutoFormField(propertyInfo: PropertyInfo): JSX.Element {\n    const fieldOptionsForProperty = fieldOptions?.[propertyInfo.name] ?? {};\n\n    return (\n      <AutoFormField\n        key={propertyInfo.name}\n        propertyInfo={propertyInfo}\n        form={form}\n        disabled={disabled}\n        readonly={readonly}\n        options={fieldOptionsForProperty}\n      />\n    );\n  }\n\n  const visibleProperties = visibleFields ? modelInfo.getProperties(visibleFields) : getDefaultProperties(modelInfo);\n\n  const fields = visibleProperties.map(createAutoFormField);\n\n  const layout = LayoutRenderer ? (\n    <LayoutRenderer form={form}>{fields}</LayoutRenderer>\n  ) : (\n    <FormLayout {...formLayoutProps}>{fields}</FormLayout>\n  );\n\n  return (\n    <div className={`auto-form ${className ?? ''}`} id={id} style={style} data-testid=\"auto-form\">\n      <VerticalLayout className=\"auto-form-fields\" onKeyDown={handleKeyDown}>\n        {layout}\n        {formError ? <div style={{ color: 'var(--lumo-error-color)' }}>{formError}</div> : <></>}\n      </VerticalLayout>\n      {!readonly &&\n      <div className=\"auto-form-toolbar\">\n        <Button\n          theme=\"primary\"\n          disabled={isSubmitDisabled}\n          // eslint-disable-next-line @typescript-eslint/no-misused-promises\n          onClick={handleSubmit}\n        >\n          Saglab\u0101t\n        </Button>\n        {form.dirty ? (\n          <Button theme=\"tertiary\" onClick={() => form.reset()}>\n            Atmest\n          </Button>\n        ) : null}\n        {showDeleteButton && (\n          <Button className=\"auto-form-delete-button\" theme=\"tertiary error\" onClick={deleteItem}>\n            Izdz\u0113st...\n          </Button>\n        )}\n      </div>}\n      {showDeleteDialog && (\n        <ConfirmDialog\n          opened\n          header=\"Dz\u0113st ierakstu\"\n          confirmTheme=\"error\"\n          cancelButtonVisible\n          // eslint-disable-next-line\n          onConfirm={confirmDelete}\n          onCancel={cancelDelete}\n          confirmText=\"Apstiprin\u0101t\"\n          cancelText=\"Atcelt\"\n        >\n          Vai tie\u0161\u0101m izdz\u0113st izv\u0113l\u0113to ierakstu?\n        </ConfirmDialog>\n      )}\n    </div>\n  );\n}\n"],
  "mappings": "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",
  "names": ["id"]
}
