{
  "version": 3,
  "sources": ["src/autogrid-renderers.tsx"],
  "sourcesContent": ["import type { GridItemModel } from '@hilla/react-components/Grid.js';\nimport type { GridColumnElement } from '@hilla/react-components/GridColumn.js';\nimport { Icon } from '@hilla/react-components/Icon.js';\n// eslint-disable-next-line\nimport '@vaadin/vaadin-lumo-styles/vaadin-iconset.js';\nimport { type CSSProperties, type JSX, useContext } from 'react';\nimport { ColumnContext } from './autogrid-column-context';\nimport { useLocaleFormatter } from './locale.js';\nimport { convertToTitleCase } from './util';\n\nexport type RendererOptions<TItem> = {\n  item: TItem;\n  model: GridItemModel<TItem>;\n  original: GridColumnElement<TItem>;\n};\n\nfunction getColumnValue<TItem>(context: ColumnContext, item: TItem): any {\n  const path = context.propertyInfo.name;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return path.split('.').reduce<any>((obj, property) => (obj ? obj[property] : undefined), item);\n}\n\nconst fontVariantStyle: CSSProperties = { fontVariantNumeric: 'tabular-nums' };\n\nexport function AutoGridIntegerRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatInteger(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridDecimalRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatDecimal(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridEnumRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item) || '';\n  return <span>{convertToTitleCase(value)}</span>;\n}\n\nexport function AutoGridBooleanRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item);\n  if (value) {\n    return <Icon aria-label=\"false\" icon=\"lumo:checkmark\" />;\n  }\n  return <Icon aria-label=\"true\" style={{ color: 'var(--lumo-secondary-text-color)' }} icon=\"lumo:minus\" />;\n}\n\nexport function AutoGridDateRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatDate(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridTimeRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatLocalTime(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridDateTimeRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatLocalDateTime(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridJsonRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item);\n  const jsonString = value ? JSON.stringify(value) : '';\n  const jsonPreview = jsonString.length > 50 ? `${jsonString.substring(0, 50)}...` : jsonString;\n  return <span>{jsonPreview}</span>;\n}\n\nexport function AutoGridRowNumberRenderer<TItem>({ model }: RendererOptions<TItem>): JSX.Element {\n  return <>{model.index + 1}</>;\n}\n"],
  "mappings": "AA2BS,SAmDA,UAnDA;AAzBT,SAAS,YAAY;AAErB,OAAO;AACP,SAAuC,kBAAkB;AACzD,SAAS,qBAAqB;AAC9B,SAAS,0BAA0B;AACnC,SAAS,0BAA0B;AAQnC,SAAS,eAAsB,SAAwB,MAAkB;AACvE,QAAM,OAAO,QAAQ,aAAa;AAElC,SAAO,KAAK,MAAM,GAAG,EAAE,OAAY,CAAC,KAAK,aAAc,MAAM,IAAI,QAAQ,IAAI,QAAY,IAAI;AAC/F;AAEA,MAAM,mBAAkC,EAAE,oBAAoB,eAAe;AAEtE,SAAS,wBAA+B,EAAE,KAAK,GAAwC;AAC5F,QAAM,YAAY,mBAAmB;AACrC,QAAM,UAAU,WAAW,aAAa;AACxC,SAAO,oBAAC,UAAK,OAAO,kBAAmB,oBAAU,cAAc,eAAe,SAAS,IAAI,CAAC,GAAE;AAChG;AAEO,SAAS,wBAA+B,EAAE,KAAK,GAAwC;AAC5F,QAAM,YAAY,mBAAmB;AACrC,QAAM,UAAU,WAAW,aAAa;AACxC,SAAO,oBAAC,UAAK,OAAO,kBAAmB,oBAAU,cAAc,eAAe,SAAS,IAAI,CAAC,GAAE;AAChG;AAEO,SAAS,qBAA4B,EAAE,KAAK,GAAwC;AACzF,QAAM,UAAU,WAAW,aAAa;AACxC,QAAM,QAAQ,eAAe,SAAS,IAAI,KAAK;AAC/C,SAAO,oBAAC,UAAM,6BAAmB,KAAK,GAAE;AAC1C;AAEO,SAAS,wBAA+B,EAAE,KAAK,GAAwC;AAC5F,QAAM,UAAU,WAAW,aAAa;AACxC,QAAM,QAAQ,eAAe,SAAS,IAAI;AAC1C,MAAI,OAAO;AACT,WAAO,oBAAC,QAAK,cAAW,SAAQ,MAAK,kBAAiB;AAAA,EACxD;AACA,SAAO,oBAAC,QAAK,cAAW,QAAO,OAAO,EAAE,OAAO,mCAAmC,GAAG,MAAK,cAAa;AACzG;AAEO,SAAS,qBAA4B,EAAE,KAAK,GAAwC;AACzF,QAAM,YAAY,mBAAmB;AACrC,QAAM,UAAU,WAAW,aAAa;AACxC,SAAO,oBAAC,UAAK,OAAO,kBAAmB,oBAAU,WAAW,eAAe,SAAS,IAAI,CAAC,GAAE;AAC7F;AAEO,SAAS,qBAA4B,EAAE,KAAK,GAAwC;AACzF,QAAM,YAAY,mBAAmB;AACrC,QAAM,UAAU,WAAW,aAAa;AACxC,SAAO,oBAAC,UAAK,OAAO,kBAAmB,oBAAU,gBAAgB,eAAe,SAAS,IAAI,CAAC,GAAE;AAClG;AAEO,SAAS,yBAAgC,EAAE,KAAK,GAAwC;AAC7F,QAAM,YAAY,mBAAmB;AACrC,QAAM,UAAU,WAAW,aAAa;AACxC,SAAO,oBAAC,UAAK,OAAO,kBAAmB,oBAAU,oBAAoB,eAAe,SAAS,IAAI,CAAC,GAAE;AACtG;AAEO,SAAS,qBAA4B,EAAE,KAAK,GAAwC;AACzF,QAAM,UAAU,WAAW,aAAa;AACxC,QAAM,QAAQ,eAAe,SAAS,IAAI;AAC1C,QAAM,aAAa,QAAQ,KAAK,UAAU,KAAK,IAAI;AACnD,QAAM,cAAc,WAAW,SAAS,KAAK,GAAG,WAAW,UAAU,GAAG,EAAE,CAAC,QAAQ;AACnF,SAAO,oBAAC,UAAM,uBAAY;AAC5B;AAEO,SAAS,0BAAiC,EAAE,MAAM,GAAwC;AAC/F,SAAO,gCAAG,gBAAM,QAAQ,GAAE;AAC5B;",
  "names": []
}
