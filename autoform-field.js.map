{
  "version": 3,
  "sources": ["src/autoform-field.tsx"],
  "sourcesContent": ["import { _enum, type AbstractModel, type EnumModel, type Validator } from '@hilla/form';\nimport { Checkbox } from '@hilla/react-components/Checkbox.js';\nimport { DatePicker } from '@hilla/react-components/DatePicker.js';\nimport { DateTimePicker } from '@hilla/react-components/DateTimePicker.js';\nimport { IntegerField } from '@hilla/react-components/IntegerField.js';\nimport { NumberField } from '@hilla/react-components/NumberField.js';\nimport { Select } from '@hilla/react-components/Select.js';\nimport { TextArea } from '@hilla/react-components/TextArea.js';\nimport { TextField } from '@hilla/react-components/TextField.js';\nimport { TimePicker } from '@hilla/react-components/TimePicker.js';\nimport type { FieldDirectiveResult, UseFormResult } from '@hilla/react-form';\nimport { useFormPart } from '@hilla/react-form';\nimport type { CSSProperties, JSX } from 'react';\nimport { useEffect, useMemo } from 'react';\nimport { useDatePickerI18n, useDateTimePickerI18n } from './locale.js';\nimport type { PropertyInfo } from './model-info.js';\nimport { convertToTitleCase } from './util.js';\n\nexport type AutoFormFieldProps = Readonly<{\n  propertyInfo: PropertyInfo;\n  form: UseFormResult<any>;\n  options: FieldOptions;\n  disabled?: boolean;\n}>;\n\ntype CustomFormFieldProps = FieldDirectiveResult & Readonly<{ label?: string; disabled?: boolean }>;\n\nexport type FieldOptions = Readonly<{\n  /**\n   * The id to apply to the field.\n   */\n  id?: string;\n  /**\n   * The class names to add to the field.\n   */\n  className?: string;\n  /**\n   * The style to apply to the field.\n   */\n  style?: CSSProperties;\n  /**\n   * The label to show for the field. If not specified, a human-readable label\n   * is generated from the property name.\n   */\n  label?: string;\n  /**\n   * The placeholder to when the field is empty.\n   *\n   * Note that some field types, such as checkbox, do not support a placeholder.\n   */\n  placeholder?: string;\n  /**\n   * The helper text to display below the field.\n   *\n   * Note that some field types, such as checkbox, do not support a helper text.\n   */\n  helperText?: string;\n  /**\n   * The number of columns to span. This value is passed to the underlying\n   * FormLayout, unless a custom layout is used. In that case, the value is\n   * ignored.\n   */\n  colspan?: number;\n  /**\n   * Whether the field should be disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Whether the field should be readonly.\n   */\n  readonly?: boolean;\n  /**\n   * Allows to specify a custom renderer for the field, for example to render a\n   * custom type of field or apply an additional layout around the field. The\n   * renderer receives field props that must be applied to the custom field\n   * component in order to connect it to the form.\n   *\n   * Example:\n   * ```tsx\n   * {\n   *   renderer: ({ field }) => (\n   *     <TextArea {...field} />\n   *   )\n   * }\n   * ```\n   */\n  renderer?(props: { field: CustomFormFieldProps }): JSX.Element;\n  /**\n   * Validators to apply to the field. The validators are added to the form\n   * when the field is rendered.\n   * UseMemo is recommended for the validators, so that they are not recreated\n   * on every render.\n   */\n  validators?: Validator[];\n}>;\n\ntype CommonFieldProps = Pick<\n  FieldOptions,\n  'className' | 'colspan' | 'disabled' | 'helperText' | 'id' | 'label' | 'placeholder' | 'readonly' | 'style'\n>;\n\ntype FieldRendererProps = Readonly<{\n  model: AbstractModel;\n  field: FieldDirectiveResult;\n  fieldProps: CommonFieldProps;\n}>;\n\nfunction getPropertyModel(form: UseFormResult<any>, propertyInfo: PropertyInfo) {\n  const pathParts = propertyInfo.name.split('.');\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return pathParts.reduce<any>((model, property) => (model ? model[property] : undefined), form.model);\n}\n\nfunction AutoFormTextField({ field, fieldProps }: FieldRendererProps) {\n  return <TextField {...field} {...fieldProps} />;\n}\n\nfunction AutoFormIntegerField({ field, fieldProps }: FieldRendererProps) {\n  return <IntegerField {...field} {...fieldProps} />;\n}\n\nfunction AutoFormDecimalField({ field, fieldProps }: FieldRendererProps) {\n  return <NumberField {...field} {...fieldProps} />;\n}\n\nfunction AutoFormDateField({ field, fieldProps }: FieldRendererProps) {\n  const i18n = useDatePickerI18n();\n  return <DatePicker i18n={i18n} {...field} {...fieldProps} />;\n}\n\nfunction AutoFormTimeField({ field, fieldProps }: FieldRendererProps) {\n  return <TimePicker {...field} {...fieldProps} />;\n}\n\nfunction AutoFormDateTimeField({ field, fieldProps }: FieldRendererProps) {\n  const i18n = useDateTimePickerI18n();\n  return <DateTimePicker i18n={i18n} {...field} {...fieldProps} />;\n}\n\nfunction AutoFormEnumField({ model, field, fieldProps }: FieldRendererProps) {\n  const enumModel = model as EnumModel;\n  const options = Object.keys(enumModel[_enum]).map((value) => ({\n    label: convertToTitleCase(value),\n    value,\n  }));\n  return <Select {...field} {...fieldProps} items={options} />;\n}\n\nfunction AutoFormBooleanField({ field, fieldProps }: FieldRendererProps) {\n  return <Checkbox {...field} {...fieldProps} />;\n}\n\nfunction AutoFormObjectField({ model, fieldProps }: FieldRendererProps) {\n  const part = useFormPart(model);\n  const jsonString = part.value ? JSON.stringify(part.value) : '';\n  return <TextArea {...fieldProps} value={jsonString} readonly />;\n}\n\nexport function AutoFormField(props: AutoFormFieldProps): JSX.Element | null {\n  const { form, propertyInfo, options } = props;\n  const label = options.label ?? propertyInfo.humanReadableName;\n  const model = getPropertyModel(form, propertyInfo);\n  const field = form.field(model);\n\n  const formPart = useFormPart(model);\n  const defaultValidators = useMemo(() => formPart.validators, []);\n  const { validators } = options;\n  useEffect(() => {\n    formPart.setValidators([...defaultValidators, ...(validators ?? [])]);\n  }, [validators]);\n\n  if (options.renderer) {\n    const customFieldProps = { ...field, disabled: props.disabled, label };\n    return options.renderer({ field: customFieldProps });\n  }\n\n  const fieldProps: CommonFieldProps = {\n    id: options.id,\n    className: options.className,\n    style: options.style,\n    label,\n    placeholder: options.placeholder,\n    helperText: options.helperText,\n    colspan: options.colspan,\n    disabled: options.disabled ?? props.disabled,\n    readonly: options.readonly,\n  };\n\n  switch (props.propertyInfo.type) {\n    case 'string':\n      return <AutoFormTextField model={model} field={field} fieldProps={fieldProps}></AutoFormTextField>;\n    case 'integer':\n      return <AutoFormIntegerField model={model} field={field} fieldProps={fieldProps}></AutoFormIntegerField>;\n    case 'decimal':\n      return <AutoFormDecimalField model={model} field={field} fieldProps={fieldProps}></AutoFormDecimalField>;\n    case 'date':\n      return <AutoFormDateField model={model} field={field} fieldProps={fieldProps}></AutoFormDateField>;\n    case 'time':\n      return <AutoFormTimeField model={model} field={field} fieldProps={fieldProps}></AutoFormTimeField>;\n    case 'datetime':\n      return <AutoFormDateTimeField model={model} field={field} fieldProps={fieldProps}></AutoFormDateTimeField>;\n    case 'enum':\n      return <AutoFormEnumField model={model} field={field} fieldProps={fieldProps}></AutoFormEnumField>;\n    case 'boolean':\n      return <AutoFormBooleanField model={model} field={field} fieldProps={fieldProps}></AutoFormBooleanField>;\n    case 'object':\n      return <AutoFormObjectField model={model} field={field} fieldProps={fieldProps}></AutoFormObjectField>;\n    default:\n      return null;\n  }\n}\n"],
  "mappings": "AAkHS;AAlHT,SAAS,aAAiE;AAC1E,SAAS,gBAAgB;AACzB,SAAS,kBAAkB;AAC3B,SAAS,sBAAsB;AAC/B,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB;AAC5B,SAAS,cAAc;AACvB,SAAS,gBAAgB;AACzB,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAE3B,SAAS,mBAAmB;AAE5B,SAAS,WAAW,eAAe;AACnC,SAAS,mBAAmB,6BAA6B;AAEzD,SAAS,0BAA0B;AA2FnC,SAAS,iBAAiB,MAA0B,cAA4B;AAC9E,QAAM,YAAY,aAAa,KAAK,MAAM,GAAG;AAE7C,SAAO,UAAU,OAAY,CAAC,OAAO,aAAc,QAAQ,MAAM,QAAQ,IAAI,QAAY,KAAK,KAAK;AACrG;AAEA,SAAS,kBAAkB,EAAE,OAAO,WAAW,GAAuB;AACpE,SAAO,oBAAC,aAAW,GAAG,OAAQ,GAAG,YAAY;AAC/C;AAEA,SAAS,qBAAqB,EAAE,OAAO,WAAW,GAAuB;AACvE,SAAO,oBAAC,gBAAc,GAAG,OAAQ,GAAG,YAAY;AAClD;AAEA,SAAS,qBAAqB,EAAE,OAAO,WAAW,GAAuB;AACvE,SAAO,oBAAC,eAAa,GAAG,OAAQ,GAAG,YAAY;AACjD;AAEA,SAAS,kBAAkB,EAAE,OAAO,WAAW,GAAuB;AACpE,QAAM,OAAO,kBAAkB;AAC/B,SAAO,oBAAC,cAAW,MAAa,GAAG,OAAQ,GAAG,YAAY;AAC5D;AAEA,SAAS,kBAAkB,EAAE,OAAO,WAAW,GAAuB;AACpE,SAAO,oBAAC,cAAY,GAAG,OAAQ,GAAG,YAAY;AAChD;AAEA,SAAS,sBAAsB,EAAE,OAAO,WAAW,GAAuB;AACxE,QAAM,OAAO,sBAAsB;AACnC,SAAO,oBAAC,kBAAe,MAAa,GAAG,OAAQ,GAAG,YAAY;AAChE;AAEA,SAAS,kBAAkB,EAAE,OAAO,OAAO,WAAW,GAAuB;AAC3E,QAAM,YAAY;AAClB,QAAM,UAAU,OAAO,KAAK,UAAU,KAAK,CAAC,EAAE,IAAI,CAAC,WAAW;AAAA,IAC5D,OAAO,mBAAmB,KAAK;AAAA,IAC/B;AAAA,EACF,EAAE;AACF,SAAO,oBAAC,UAAQ,GAAG,OAAQ,GAAG,YAAY,OAAO,SAAS;AAC5D;AAEA,SAAS,qBAAqB,EAAE,OAAO,WAAW,GAAuB;AACvE,SAAO,oBAAC,YAAU,GAAG,OAAQ,GAAG,YAAY;AAC9C;AAEA,SAAS,oBAAoB,EAAE,OAAO,WAAW,GAAuB;AACtE,QAAM,OAAO,YAAY,KAAK;AAC9B,QAAM,aAAa,KAAK,QAAQ,KAAK,UAAU,KAAK,KAAK,IAAI;AAC7D,SAAO,oBAAC,YAAU,GAAG,YAAY,OAAO,YAAY,UAAQ,MAAC;AAC/D;AAEO,SAAS,cAAc,OAA+C;AAC3E,QAAM,EAAE,MAAM,cAAc,QAAQ,IAAI;AACxC,QAAM,QAAQ,QAAQ,SAAS,aAAa;AAC5C,QAAM,QAAQ,iBAAiB,MAAM,YAAY;AACjD,QAAM,QAAQ,KAAK,MAAM,KAAK;AAE9B,QAAM,WAAW,YAAY,KAAK;AAClC,QAAM,oBAAoB,QAAQ,MAAM,SAAS,YAAY,CAAC,CAAC;AAC/D,QAAM,EAAE,WAAW,IAAI;AACvB,YAAU,MAAM;AACd,aAAS,cAAc,CAAC,GAAG,mBAAmB,GAAI,cAAc,CAAC,CAAE,CAAC;AAAA,EACtE,GAAG,CAAC,UAAU,CAAC;AAEf,MAAI,QAAQ,UAAU;AACpB,UAAM,mBAAmB,EAAE,GAAG,OAAO,UAAU,MAAM,UAAU,MAAM;AACrE,WAAO,QAAQ,SAAS,EAAE,OAAO,iBAAiB,CAAC;AAAA,EACrD;AAEA,QAAM,aAA+B;AAAA,IACnC,IAAI,QAAQ;AAAA,IACZ,WAAW,QAAQ;AAAA,IACnB,OAAO,QAAQ;AAAA,IACf;AAAA,IACA,aAAa,QAAQ;AAAA,IACrB,YAAY,QAAQ;AAAA,IACpB,SAAS,QAAQ;AAAA,IACjB,UAAU,QAAQ,YAAY,MAAM;AAAA,IACpC,UAAU,QAAQ;AAAA,EACpB;AAEA,UAAQ,MAAM,aAAa,MAAM;AAAA,IAC/B,KAAK;AACH,aAAO,oBAAC,qBAAkB,OAAc,OAAc,YAAwB;AAAA,IAChF,KAAK;AACH,aAAO,oBAAC,wBAAqB,OAAc,OAAc,YAAwB;AAAA,IACnF,KAAK;AACH,aAAO,oBAAC,wBAAqB,OAAc,OAAc,YAAwB;AAAA,IACnF,KAAK;AACH,aAAO,oBAAC,qBAAkB,OAAc,OAAc,YAAwB;AAAA,IAChF,KAAK;AACH,aAAO,oBAAC,qBAAkB,OAAc,OAAc,YAAwB;AAAA,IAChF,KAAK;AACH,aAAO,oBAAC,yBAAsB,OAAc,OAAc,YAAwB;AAAA,IACpF,KAAK;AACH,aAAO,oBAAC,qBAAkB,OAAc,OAAc,YAAwB;AAAA,IAChF,KAAK;AACH,aAAO,oBAAC,wBAAqB,OAAc,OAAc,YAAwB;AAAA,IACnF,KAAK;AACH,aAAO,oBAAC,uBAAoB,OAAc,OAAc,YAAwB;AAAA,IAClF;AACE,aAAO;AAAA,EACX;AACF;",
  "names": []
}
