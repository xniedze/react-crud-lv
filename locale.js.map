{
  "version": 3,
  "sources": ["src/locale.ts"],
  "sourcesContent": ["import { DatePickerElement, type DatePickerDate, type DatePickerI18n } from '@hilla/react-components/DatePicker.js';\nimport { DateTimePickerElement, type DateTimePickerI18n } from '@hilla/react-components/DateTimePicker.js';\nimport { createContext, useContext, useMemo } from 'react';\n\nexport const LocaleContext = createContext(navigator.language);\n\nfunction getFormatRegex(format: Intl.DateTimeFormat) {\n  const sampleDate = new Date(1234, 5 - 1, 6);\n  const formattedSample = format.format(sampleDate);\n  const pattern = formattedSample\n    .replace('1234', '(?<year>\\\\d+)')\n    .replace('05', '(?<month>\\\\d+)')\n    .replace('5', '(?<month>\\\\d+)')\n    .replace('06', '(?<day>\\\\d+)')\n    .replace('6', '(?<day>\\\\d+)');\n\n  return new RegExp(pattern, 'u');\n}\n\nfunction tryFormatDate(formatter: Intl.DateTimeFormat, value?: string): string {\n  try {\n    return value ? formatter.format(new Date(value)) : '';\n  } catch (e) {\n    return '';\n  }\n}\n\nexport class LocaleFormatter {\n  readonly #date: Intl.DateTimeFormat;\n  readonly #localTime: Intl.DateTimeFormat;\n  readonly #localDateTime: Intl.DateTimeFormat;\n  readonly #integer: Intl.NumberFormat;\n  readonly #decimal: Intl.NumberFormat;\n  readonly #parsePattern: RegExp;\n\n  constructor(locale?: string) {\n    this.#date = new Intl.DateTimeFormat(locale);\n\n    this.#localTime = new Intl.DateTimeFormat(locale, {\n      hour: 'numeric',\n      minute: 'numeric',\n    });\n\n    this.#localDateTime = new Intl.DateTimeFormat(locale, {\n      day: 'numeric',\n      month: 'numeric',\n      year: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n    });\n\n    this.#integer = new Intl.NumberFormat(locale, {\n      maximumFractionDigits: 0,\n    });\n\n    this.#decimal = new Intl.NumberFormat(locale, {\n      maximumFractionDigits: 2,\n      minimumFractionDigits: 2,\n    });\n\n    this.#parsePattern = getFormatRegex(this.#date);\n  }\n\n  formatDate(value?: string): string;\n  formatDate(value: DatePickerDate): string;\n  formatDate(value?: DatePickerDate | string): string {\n    if (typeof value === 'object') {\n      const { year, month, day } = value;\n      const date = new Date();\n      date.setFullYear(year);\n      date.setMonth(month);\n      date.setDate(day);\n      return this.#date.format(date);\n    }\n\n    return tryFormatDate(this.#date, value);\n  }\n\n  formatLocalTime(value?: string): string {\n    return tryFormatDate(this.#localTime, `2000-01-01T${value}`);\n  }\n\n  formatLocalDateTime(value?: string): string {\n    return tryFormatDate(this.#localDateTime, value);\n  }\n\n  formatInteger(value?: number): string {\n    return value && Number.isFinite(value) ? this.#integer.format(value) : '';\n  }\n\n  formatDecimal(value?: number): string {\n    return value && Number.isFinite(value) ? this.#decimal.format(value) : '';\n  }\n\n  parse(dateString: string): DatePickerDate | undefined {\n    const match = this.#parsePattern.exec(dateString);\n    const year = Number(match?.groups?.year);\n    const month = Number(match?.groups?.month) - 1;\n    const day = Number(match?.groups?.day);\n\n    // Verify that the parsed date is valid\n    const dateInstance = new Date();\n    dateInstance.setFullYear(year);\n    dateInstance.setMonth(month);\n    dateInstance.setDate(day);\n\n    if (dateInstance.getFullYear() !== year || dateInstance.getMonth() !== month || dateInstance.getDate() !== day) {\n      return undefined;\n    }\n\n    return { year, month, day };\n  }\n}\n\nexport function useLocaleFormatter(): LocaleFormatter {\n  const locale = useContext(LocaleContext);\n  return useMemo(() => new LocaleFormatter(locale), [locale]);\n}\n\nconst defaultDatePickerI18n = new DatePickerElement().i18n;\n\nexport function useDatePickerI18n(): DatePickerI18n {\n  const formatter = useLocaleFormatter();\n\n  return useMemo(\n    () => ({\n      ...defaultDatePickerI18n,\n      formatDate(value) {\n        return formatter.formatDate(value);\n      },\n      parseDate(value) {\n        return formatter.parse(value);\n      },\n    }),\n    [formatter],\n  );\n}\n\nconst defaultDateTimePickerI18n = new DateTimePickerElement().i18n;\n\nexport function useDateTimePickerI18n(): DateTimePickerI18n {\n  const datePickerI18n = useDatePickerI18n();\n\n  return useMemo(\n    () => ({\n      ...defaultDateTimePickerI18n,\n      ...datePickerI18n,\n    }),\n    [datePickerI18n],\n  );\n}\n"],
  "mappings": "AAAA,SAAS,yBAAmE;AAC5E,SAAS,6BAAsD;AAC/D,SAAS,eAAe,YAAY,eAAe;AAE5C,MAAM,gBAAgB,cAAc,UAAU,QAAQ;AAE7D,SAAS,eAAe,QAA6B;AACnD,QAAM,aAAa,IAAI,KAAK,MAAM,IAAI,GAAG,CAAC;AAC1C,QAAM,kBAAkB,OAAO,OAAO,UAAU;AAChD,QAAM,UAAU,gBACb,QAAQ,QAAQ,eAAe,EAC/B,QAAQ,MAAM,gBAAgB,EAC9B,QAAQ,KAAK,gBAAgB,EAC7B,QAAQ,MAAM,cAAc,EAC5B,QAAQ,KAAK,cAAc;AAE9B,SAAO,IAAI,OAAO,SAAS,GAAG;AAChC;AAEA,SAAS,cAAc,WAAgC,OAAwB;AAC7E,MAAI;AACF,WAAO,QAAQ,UAAU,OAAO,IAAI,KAAK,KAAK,CAAC,IAAI;AAAA,EACrD,SAAS,GAAG;AACV,WAAO;AAAA,EACT;AACF;AAEO,MAAM,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAET,YAAY,QAAiB;AAC3B,SAAK,QAAQ,IAAI,KAAK,eAAe,MAAM;AAE3C,SAAK,aAAa,IAAI,KAAK,eAAe,QAAQ;AAAA,MAChD,MAAM;AAAA,MACN,QAAQ;AAAA,IACV,CAAC;AAED,SAAK,iBAAiB,IAAI,KAAK,eAAe,QAAQ;AAAA,MACpD,KAAK;AAAA,MACL,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,IACV,CAAC;AAED,SAAK,WAAW,IAAI,KAAK,aAAa,QAAQ;AAAA,MAC5C,uBAAuB;AAAA,IACzB,CAAC;AAED,SAAK,WAAW,IAAI,KAAK,aAAa,QAAQ;AAAA,MAC5C,uBAAuB;AAAA,MACvB,uBAAuB;AAAA,IACzB,CAAC;AAED,SAAK,gBAAgB,eAAe,KAAK,KAAK;AAAA,EAChD;AAAA,EAIA,WAAW,OAAyC;AAClD,QAAI,OAAO,UAAU,UAAU;AAC7B,YAAM,EAAE,MAAM,OAAO,IAAI,IAAI;AAC7B,YAAM,OAAO,oBAAI,KAAK;AACtB,WAAK,YAAY,IAAI;AACrB,WAAK,SAAS,KAAK;AACnB,WAAK,QAAQ,GAAG;AAChB,aAAO,KAAK,MAAM,OAAO,IAAI;AAAA,IAC/B;AAEA,WAAO,cAAc,KAAK,OAAO,KAAK;AAAA,EACxC;AAAA,EAEA,gBAAgB,OAAwB;AACtC,WAAO,cAAc,KAAK,YAAY,cAAc,KAAK,EAAE;AAAA,EAC7D;AAAA,EAEA,oBAAoB,OAAwB;AAC1C,WAAO,cAAc,KAAK,gBAAgB,KAAK;AAAA,EACjD;AAAA,EAEA,cAAc,OAAwB;AACpC,WAAO,SAAS,OAAO,SAAS,KAAK,IAAI,KAAK,SAAS,OAAO,KAAK,IAAI;AAAA,EACzE;AAAA,EAEA,cAAc,OAAwB;AACpC,WAAO,SAAS,OAAO,SAAS,KAAK,IAAI,KAAK,SAAS,OAAO,KAAK,IAAI;AAAA,EACzE;AAAA,EAEA,MAAM,YAAgD;AACpD,UAAM,QAAQ,KAAK,cAAc,KAAK,UAAU;AAChD,UAAM,OAAO,OAAO,OAAO,QAAQ,IAAI;AACvC,UAAM,QAAQ,OAAO,OAAO,QAAQ,KAAK,IAAI;AAC7C,UAAM,MAAM,OAAO,OAAO,QAAQ,GAAG;AAGrC,UAAM,eAAe,oBAAI,KAAK;AAC9B,iBAAa,YAAY,IAAI;AAC7B,iBAAa,SAAS,KAAK;AAC3B,iBAAa,QAAQ,GAAG;AAExB,QAAI,aAAa,YAAY,MAAM,QAAQ,aAAa,SAAS,MAAM,SAAS,aAAa,QAAQ,MAAM,KAAK;AAC9G,aAAO;AAAA,IACT;AAEA,WAAO,EAAE,MAAM,OAAO,IAAI;AAAA,EAC5B;AACF;AAEO,SAAS,qBAAsC;AACpD,QAAM,SAAS,WAAW,aAAa;AACvC,SAAO,QAAQ,MAAM,IAAI,gBAAgB,MAAM,GAAG,CAAC,MAAM,CAAC;AAC5D;AAEA,MAAM,wBAAwB,IAAI,kBAAkB,EAAE;AAE/C,SAAS,oBAAoC;AAClD,QAAM,YAAY,mBAAmB;AAErC,SAAO;AAAA,IACL,OAAO;AAAA,MACL,GAAG;AAAA,MACH,WAAW,OAAO;AAChB,eAAO,UAAU,WAAW,KAAK;AAAA,MACnC;AAAA,MACA,UAAU,OAAO;AACf,eAAO,UAAU,MAAM,KAAK;AAAA,MAC9B;AAAA,IACF;AAAA,IACA,CAAC,SAAS;AAAA,EACZ;AACF;AAEA,MAAM,4BAA4B,IAAI,sBAAsB,EAAE;AAEvD,SAAS,wBAA4C;AAC1D,QAAM,iBAAiB,kBAAkB;AAEzC,SAAO;AAAA,IACL,OAAO;AAAA,MACL,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,IACA,CAAC,cAAc;AAAA,EACjB;AACF;",
  "names": []
}
